datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  problems      UserProblem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProblem {
  id                 String    @id @default(cuid())
  problemTitle       String
  problemDescription String?
  problemLikes       Int
  problemComments    Comment[]
  problemTags        Tag[]
  problemOwnerId     String
  problemOwner       User      @relation(fields: [problemOwnerId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String        @id @default(cuid())
  tagTitle    String        @unique
  tagViews    Int
  UserProblem UserProblem[]
}

model Comment {
  id              String      @id @default(cuid())
  userProblemId   String
  userProblem     UserProblem @relation(fields: [userProblemId], references: [id], onDelete: Cascade)
  commentBody     String
  commentParentId String?
  parent          Comment?    @relation("ChildCategories", fields: [commentParentId], references: [id])
  children        Comment[]   @relation("ChildCategories")
}
